{"version":3,"sources":["api.js","components/search/search.js","components/current-weather/current-weather.js","components/forecast/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["geoApiOptions","method","headers","X-RapidAPI-Key","X-RapidAPI-Host","WEATHER_API_URL","WEATHER_API_KEY","Search","_ref","onSearchChange","_useState","useState","_useState2","_slicedToArray","search","setSearch","React","createElement","AsyncPaginate","placeholder","debounceTimeout","value","onChange","searchData","loadOptions","inputValue","fetch","concat","then","response","json","options","data","map","city","latitude","longitude","label","name","countryCode","catch","err","console","error","CurrentWeather","className","weather","description","alt","src","icon","Math","round","main","temp","feels_like","wind","speed","humidity","pressure","WEEK_DAYS","Forecast","dayInAWeek","Date","getDay","forecastDays","slice","length","list","splice","item","idx","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","unwrapped","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","App","currentWeather","setCurrentWeather","_useState3","_useState4","forecast","setForecast","_searchData$value$spl","split","_searchData$value$spl2","lat","lon","currentWeatherFetch","forecastFetch","all","_asyncToGenerator","_callee","weatherResponse","forecastResponse","_context","_objectSpread","_x","apply","arguments","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dedde46e.chunk.js","sourcesContent":["export const geoApiOptions = {\r\n    method: 'GET',\r\n    headers: {\r\n        'X-RapidAPI-Key': 'a6a68233camsh2ca6218598b5effp1a8c4bjsn830d028a0a6b',\r\n        'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\r\n    }\r\n};\r\n\r\nexport const GEO_API_URL = \"https://wft-geo-db.p.rapidapi.com/v1/geo\";\r\nexport const WEATHER_API_URL = \"https://api.openweathermap.org/data/2.5\";\r\nexport const WEATHER_API_KEY = \"87bbc545c8d70a0b2bf925350fe16752\";","import React, { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    // Fetch request, attaining the long/lat of the city along with country code in search list.\r\n    // Only retrieves cities with over 100,000 population. Can be changed within input url below\r\n    const loadOptions = (inputValue) => {\r\n        return fetch(\r\n            `${GEO_API_URL}/cities?minPopulation=100000&namePrefix=${inputValue}`,\r\n            geoApiOptions\r\n        )\r\n            .then((response) => response.json())\r\n            .then((response) => {\r\n                return {\r\n                    options: response.data.map((city) => {\r\n                        return {\r\n                            value: `${city.latitude} ${city.longitude}`,\r\n                            label: `${city.name}, ${city.countryCode}`,\r\n                        };\r\n                    }),\r\n                };\r\n            })\r\n            .catch((err) => console.error(err));\r\n    };\r\n\r\n    // Handles Search data\r\n    const handleOnChange = (searchData) => {\r\n        setSearch(searchData);\r\n        onSearchChange(searchData);\r\n    };\r\n\r\n\r\n    // Returns Paginated list of cities based off user search\r\n    return (\r\n        <AsyncPaginate\r\n            placeholder=\"Search for city\"\r\n            debounceTimeout={600}\r\n            value={search}\r\n            onChange={handleOnChange}\r\n            loadOptions={loadOptions}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport \"./current-weather.css\";\r\n\r\nconst CurrentWeather = ({data}) => {\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"top\">\r\n                <div>\r\n                    <p className=\"city\">{data.city}</p>\r\n                    <p className=\"weather-description\">{data.weather[0].description}</p>\r\n                </div>\r\n                <img\r\n                    alt=\"weather\"\r\n                    className=\"weather-icon\"\r\n                    src={`icons/${data.weather[0].icon}.png`}\r\n                />\r\n            </div>\r\n            <div className=\"bottom\">\r\n                <p className=\"temperature\">{Math.round(data.main.temp)}°C</p>\r\n                <div className=\"details\">\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Details</span>\r\n                    </div>\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Feels like</span>\r\n                        <span className=\"parameter-value\">\r\n              {Math.round(data.main.feels_like)}°C\r\n            </span>\r\n                    </div>\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Wind</span>\r\n                        <span className=\"parameter-value\">{data.wind.speed} m/s</span>\r\n                    </div>\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Humidity</span>\r\n                        <span className=\"parameter-value\">{data.main.humidity}%</span>\r\n                    </div>\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Pressure</span>\r\n                        <span className=\"parameter-value\">{data.main.pressure} hPa</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;","import React from \"react\";\r\nimport \"./forecast.css\";\r\n\r\nconst WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\nconst Forecast = ({ data }) => {\r\n\r\n    // Gets day of week\r\n    const dayInAWeek = new Date().getDay();\r\n    const forecastDays = WEEK_DAYS.slice(dayInAWeek, WEEK_DAYS.length).concat(WEEK_DAYS.slice(0, dayInAWeek));\r\n\r\n    return (\r\n        <div className=\"flex-container\">\r\n            {data.list.splice(0, 5).map((item, idx) => (\r\n                <div className=\"card\">\r\n                    <h5>{forecastDays[idx]}</h5>\r\n                    <img\r\n                        alt=\"weather\"\r\n                        className=\"weather-icon\"\r\n                        src={`icons/${item.weather[0].icon}.png`}\r\n                    />\r\n                    <p className=\"temperature\">{Math.round(item.main.temp)}°C</p>\r\n                    <p className=\"weather-description\">{item.weather[0].description}</p>\r\n                    <div className=\"parameter-row\">\r\n                        <span className=\"parameter-label\">Wind</span>\r\n                        <span className=\"parameter-value\">{item.wind.speed} m/s</span>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Forecast;","import './App.css';\nimport Search from \"./components/search/search\";\nimport {WEATHER_API_URL , WEATHER_API_KEY} from \"./api\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport React, { useState } from \"react\";\nimport Forecast from \"./components/forecast/forecast\";\n\nfunction App() {\n    const [currentWeather, setCurrentWeather] = useState(null);\n    const [forecast, setForecast] = useState(null);\n\n    const handleOnSearchChange = (searchData) => {\n       const [lat, lon] = searchData.value.split(\" \");\n\n        const currentWeatherFetch = fetch(\n            `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n\n        const forecastFetch = fetch(\n            `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n        );\n\n        Promise.all([currentWeatherFetch, forecastFetch])\n            .then(async (response) => {\n                const weatherResponse = await response[0].json();\n                const forecastResponse = await response[1].json();\n\n                setCurrentWeather({city: searchData.label, ...weatherResponse});\n                setForecast({city: searchData.label, ...forecastResponse});\n            })\n            .catch((err) => console.error(err));\n    }\n\n  return (\n    <div className=\"container\">\n        <h2>Weather4Me</h2>\n        <Search onSearchChange={handleOnSearchChange}/>\n        {currentWeather && <CurrentWeather data={currentWeather} />}\n        {forecast && <Forecast data={forecast} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}